import{F as r,hr as j,aD as Q,df as J,hs as z}from"./index-C1aGfQcb.js";import{o as V,i as X,M as Y,f as Z,h as tt}from"./mat3-Dg2BrR6m.js";import{e as et,E as ot,m as st}from"./MapView-DMINGQ-3.js";import{t as it}from"./vec2f32-BbH2jxlN.js";import{r as rt}from"./vec3f32-nZdmKIgz.js";import{L as nt}from"./normalizeUtils-Bg1OALXh.js";import{n as at}from"./WGLContainer-Bti4JDk_.js";import{t as pt,a as L,i as dt}from"./FeatureCommandQueue-DFtBlGYR.js";import{h as q,C as w,g as a,t as ht,j as P,S as lt,m as B,I as ct,v as ut,P as U,a as ft,b as mt,G as vt,H as xt,l as yt,w as wt,e as gt}from"./UpdateTracking2D-Do-Jp4xp.js";import{O as _t,I as A,C as F,E as Mt}from"./enums-Dk3osxpS.js";class I extends ct{}r([q(0,w)],I.prototype,"pos",void 0),r([q(1,w)],I.prototype,"uv",void 0);class $t extends ut{}class W extends U{}r([a(ht)],W.prototype,"dvs",void 0);class v extends U{}r([a(w)],v.prototype,"perspective",void 0),r([a(w)],v.prototype,"texSize",void 0),r([a(P)],v.prototype,"wrapAroundShift",void 0),r([a(P)],v.prototype,"opacity",void 0),r([a(lt)],v.prototype,"texture",void 0);class y extends ft{vertex(e){const t=e.uv.divide(this.config.texSize),o=new P(1).add(mt(t,this.config.perspective)),s=new vt(e.pos.add(new w(this.config.wrapAroundShift,0)),1),i=this.transform.dvs.multiply(s);return{uv:t,glPosition:new xt(i.xy.multiply(o),0,o)}}fragment(e){const t=yt(this.config.texture,e.uv).multiply(this.config.opacity),o=new wt;return o.glFragColor=t,o}}r([a(W)],y.prototype,"transform",void 0),r([a(v)],y.prototype,"config",void 0),r([j(0,B(I))],y.prototype,"vertex",null),r([j(0,B($t))],y.prototype,"fragment",null);let St=class extends pt{constructor(){super(...arguments),this.type=gt.Overlay,this._mesh=null,this.shaders={overlay:new y}}render(e,t){const{context:o,painter:s}=e,i=this._getMesh(e,t);s.setPipelineState(L);const{isWrapAround:p,wrapAroundShift:c}=t.config,u={...t.config,wrapAroundShift:0},f={shader:this.shaders.overlay,uniforms:{transform:t.transform,config:u},defines:null,optionalAttributes:null,useComputeBuffer:!1};s.setPipelineState({...L,stencil:{write:!1,test:{compare:_t.EQUAL,op:{fail:A.KEEP,zFail:A.KEEP,zPass:A.REPLACE},ref:0,mask:255}}}),s.submitDrawMeshUntyped(o,f,i),p&&(u.wrapAroundShift=c,s.submitDrawMeshUntyped(o,f,i))}shutdown(){Q(this._mesh)}_getMesh(e,t){const{context:o}=e;if(this._mesh){const s=this._mesh.vertexBuffers.get("positions");if(!s)throw new Error("Buffer not found");s.setData(t.position)}else{const s=t.index!=null?t.index.length:t.position.length/2;this._mesh=new dt(o,{vertex:{positions:t.position,uvs:t.tex},index:t.index!=null?{index:t.index}:void 0,groups:[{attributes:[{name:"pos",count:2,type:F.FLOAT,location:0,vertex:"positions",stride:8,offset:0},{name:"tex",count:2,type:F.UNSIGNED_SHORT,location:1,vertex:"uvs",stride:4,offset:0}],index:t.index!=null?"index":void 0,primitive:Mt.TRIANGLE_STRIP}],parts:[{group:0,start:0,count:s}]})}return this._mesh}};class jt extends at{constructor(){super(...arguments),this._viewStateId=-1,this._dvsMat3=et(),this._overlayTechnique=new St}get dvsMat3(){return this._dvsMat3}beforeRender(e){this._updateMatrices(e),this._updateOverlays(e,this.children);for(const t of this.children)t.beforeRender(e)}doRender(e){if(e.drawPhase!==ot.MAP||!this.visible)return;super.doRender(e);const t=this._overlayTechnique;for(const o of this.children)o.draw(e,t)}onDetach(){this._overlayTechnique.shutdown()}_updateMatrices(e){const{state:t}=e,{id:o,size:s,pixelRatio:i,resolution:p,rotation:c,viewpoint:u,displayMat3:f}=t;if(this._viewStateId===o)return;const g=z(c),d=i*s[0],m=i*s[1];this._localOrigin=u.targetGeometry.clone();const{x,y:$}=this._localOrigin,_=nt(x,t.spatialReference);this._localOrigin.x=_,this._localOrigin.y=$;const S=p*d,O=p*m,n=V(this._dvsMat3);X(n,n,f),Y(n,n,it(d/2,m/2)),Z(n,n,rt(d/S,-m/O,1)),tt(n,n,-g),this._viewStateId=o}_updateOverlays(e,t){const{state:o}=e,{rotation:s,spatialReference:i,worldScreenWidth:p,size:c,viewpoint:u}=o,f=this._localOrigin;let g,d=0;const m=J(i);if(m&&i.isWrappable){const x=c[0],$=c[1],_=z(s),S=Math.abs(Math.cos(_)),O=Math.abs(Math.sin(_)),n=Math.round(x*S+$*O),[C,D]=m.valid,h=st(i),{x:G,y:H}=u.targetGeometry,N=[G,H],b=[0,0];o.toScreen(b,N);const M=[0,0];let E;E=n>p?.5*p:.5*n;const T=Math.floor((G+.5*h)/h),K=C+T*h,k=D+T*h,R=[b[0]+E,0];o.toMap(M,R),M[0]>k&&(d=h),R[0]=b[0]-E,o.toMap(M,R),M[0]<K&&(d=-h),g={worldWidth:h,xBounds:[C,D]}}for(const x of t)x.updateDrawCoords(f,d,i,g)}}export{jt as u};
