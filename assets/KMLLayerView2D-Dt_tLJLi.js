import{cS as T,aR as z,br as B,M as F,gj as O,aD as C,cu as U,b8 as A,gk as N,gl as E,fd as W,F as v,G as S,K as H}from"./index-C1aGfQcb.js";import{K as k,W as K}from"./projection-BOBOhWzm.js";import{b as D,g as J,d as Y}from"./kmlUtils-B_06u8wB.js";import{f as Q}from"./utils-DGPHbhMN.js";import{c as P}from"./GraphicsCollection-BlUFPpxh.js";import{g as X,f as Z,b as tt}from"./Bitmap-Dit7l_zy.js";import{a as it}from"./BitmapContainer-rte_DrKS.js";import{j as et}from"./LayerView2D-_cD1rRgW.js";import{t as M}from"./GraphicContainer-CVlzYn8G.js";import{F as R}from"./GraphicsView2D-igLDaNxb.js";import{y as rt}from"./LayerView-ClcY0vUI.js";import{C as at,i as ot}from"./rasterProjectionHelper-BlM04fcc.js";import{a as st}from"./WGLContainer-Bti4JDk_.js";import{y as nt,o as pt}from"./MaterialPrograms-CnBwY2wF.js";import{D as $,G as lt,U as mt,X as j}from"./enums-Dk3osxpS.js";import{E as ht}from"./Program-B50gSpr4.js";import{c as ct}from"./rasterUtils-ClCwcK01.js";import{e as L,m as dt}from"./Texture-CLoEFKJJ.js";import"./projectBuffer-CZ7yaGuo.js";import"./jsonUtils-CWFaUb2E.js";import"./UniqueValueRenderer-CAZbf8NT.js";import"./RendererLegendOptions-CULirduz.js";import"./diffUtils-DMLidw0V.js";import"./colorRamps-D4VCsfmX.js";import"./sizeVariableUtils-Cmcuvw-4.js";import"./visualVariableUtils-dx28E4EQ.js";import"./lengthUtils-CFwdZ3dz.js";import"./jsonUtils-BWWcP_yB.js";import"./defaults-Dbnhuv3C.js";import"./defaultsJSON-GKolV7NZ.js";import"./styleUtils-CEgUrR2a.js";import"./LRUCache-DbPTy7LA.js";import"./Version-DD-eRUXC.js";import"./FieldsIndex-BrdRr9E_.js";import"./UnknownTimeZone-DhxWDwo9.js";import"./OverrideHelper-D-UVQ00R.js";import"./colorUtils-BWiljOUv.js";import"./vec42-BHDxGccW.js";import"./vec4f64-o2zAXfmz.js";import"./utils-D7agaEG-.js";import"./enums-CmIX1y88.js";import"./quantizationUtils-DbJV_fl5.js";import"./heatmapUtils-D0BPLm9w.js";import"./FeatureSet-CeKoTEEO.js";import"./mat3-Dg2BrR6m.js";import"./MapView-DMINGQ-3.js";import"./ColorBackground-BzAAhJtv.js";import"./CollectionFlattener-COw367kg.js";import"./basemapUtils-SfV6Ch_Z.js";import"./utils-sqJe3zMg.js";import"./TablesMixin-CmFQDxpI.js";import"./Layer-CneDw8eF.js";import"./TimeExtent-DGiXUfis.js";import"./timeUtils-X0MXjtQ8.js";import"./workers-CeelWDzo.js";import"./TileInfo-C4AYiz3R.js";import"./TileKey-DZd6gJy7.js";import"./UpdatingHandles-DOPUoIlu.js";import"./screenUtils-CLE_gLy7.js";import"./signal-CRiDvIIF.js";import"./HeightModelInfo-kVs8dE0B.js";import"./Query-LPs1Zyw4.js";import"./FullTextSearch-Cza0yp3f.js";import"./IViewEvents-Bci6PjlS.js";import"./mat2df64-B7VPBnkO.js";import"./a11yUtils-Tsw26pQ5.js";import"./heightModelInfoUtils-BhzRw8-2.js";import"./arcgisLayerUrl-BkZy4Mr3.js";import"./ViewingMode-HRfKv6NR.js";import"./vec2f64-CCfZVA9N.js";import"./vec2-D9okOEat.js";import"./mat2df32-BR-p9z6z.js";import"./normalizeUtils-Bg1OALXh.js";import"./normalizeUtilsCommon-UUlRRPVA.js";import"./utils-ByvCMLXh.js";import"./vec2f32-BbH2jxlN.js";import"./unitBezier-BX6NeAEr.js";import"./Scheduler-DS_v5N7L.js";import"./debugFlags-CfZYxH5Q.js";import"./Tile-9ZT_yo0a.js";import"./TileKey-C3cOKqPf.js";import"./QueueProcessor-8zZK2k9z.js";import"./quickselect-QQC62dOK.js";import"./vec32-CmwgPQMd.js";import"./definitions-C0Jy3zs7.js";import"./HighlightDefaults-D7TbvM-a.js";import"./imageUtils-DpI9AOR9.js";import"./capabilities-A2uoe7dc.js";import"./themeUtils-C3zvZbsE.js";import"./accessibleHandler-CubitGf2.js";import"./GoTo-H_qEVlhS.js";import"./ZoomViewModel-BtZMM985.js";import"./utils-CS8i_70G.js";import"./Container-DukYN7bA.js";import"./EffectView-Di3KCO94.js";import"./parser-C4Qiz3JH.js";import"./utils-BQBvadb7.js";import"./AGraphicContainer-Be74AnP4.js";import"./TechniqueInstance-Ct6vq7te.js";import"./UpdateTracking2D-Do-Jp4xp.js";import"./BindType-BmZEZMMh.js";import"./Util-BK6CBhAA.js";import"./LabelMetric-BbDPE4Hv.js";import"./VertexElementDescriptor-BOD-G50G.js";import"./BoundingBox-CnpCxTZE.js";import"./TileContainer-ChXztKMJ.js";import"./FeatureCommandQueue-DFtBlGYR.js";import"./CIMSymbolHelper-CkjLOfcU.js";import"./BidiEngine-DNnuvc1i.js";import"./fontUtils-BVEStqBT.js";import"./OptimizedGeometry-C9mSZhHi.js";import"./GeometryUtils-Bkk2TwKC.js";import"./Rect-CUzevAry.js";import"./BufferObject-C4qiEJeh.js";import"./VertexArrayObject-CzGu5bI8.js";import"./constants-F8oTIn7N.js";import"./vec3f32-nZdmKIgz.js";import"./AttributeStore-DoHrhu85.js";import"./TimeOnly-vNYE6bX9.js";import"./centroid-DdLmOD72.js";import"./featureConversionUtils-C-Uqf9Q4.js";import"./OptimizedFeature-swgcyHeh.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./labelUtils-C_ZaLudT.js";import"./queryUtils-DfwPGxwH.js";import"./json-Wa8cmqdu.js";import"./timeSupport-DZeNU3Q4.js";import"./normalizeUtilsSync-DxE8L4Ib.js";import"./ProgramTemplate-FAwkPdO7.js";import"./StyleDefinition-BTt_i6C1.js";import"./config-MDUrh2eL.js";import"./earcut-Lltz9D9k.js";import"./webglDeps-Df2TMzh9.js";import"./NestedMap-GuqgquCN.js";import"./renderState-QDOxIGNB.js";import"./basicInterfaces-CZwQPxTp.js";import"./interfaces-DDtDqZYj.js";import"./testSVGPremultipliedAlpha-ALFMACR3.js";import"./floatRGBA-BxT4aGRY.js";import"./doublePrecisionUtils-B0owpBza.js";class m{constructor(t){if(this._ownsRctx=!1,t)this._ownsRctx=!1,this._rctx=t;else{if(m._instance)return m._instanceRefCount++,m._instance;m._instanceRefCount=1,m._instance=this,this._ownsRctx=!0;const i=document.createElement("canvas").getContext("webgl2");i.getExtension("OES_texture_float"),this._rctx=new nt(i,{})}const a={applyProjection:!0,bilinear:!1,bicubic:!1},o=pt("raster/reproject","raster/reproject",new Map([["a_position",0]]),a);this._program=this._rctx.programCache.acquire(o.shaders.vertexShader,o.shaders.fragmentShader,o.attributes),this._rctx.useProgram(this._program),this._program.setUniform1f("u_opacity",1),this._program.setUniform1i("u_image",0),this._program.setUniform1i("u_flipY",0),this._program.setUniform1i("u_transformGrid",1),this._quad=new st(this._rctx,[0,0,1,0,0,1,1,1])}reprojectTexture(t,a,o=!1){const i=k(t.extent,a),r=new T({x:(t.extent.xmax-t.extent.xmin)/t.texture.descriptor.width,y:(t.extent.ymax-t.extent.ymin)/t.texture.descriptor.height,spatialReference:t.extent.spatialReference}),{x:s,y:l}=at(r,a,t.extent);let n=(s+l)/2;const p=Math.round((i.xmax-i.xmin)/n),g=Math.round((i.ymax-i.ymin)/n);n=(i.width/p+i.height/g)/2;const I=new T({x:n,y:n,spatialReference:i.spatialReference}),_=ot({projectedExtent:i,srcBufferExtent:t.extent,pixelSize:I,hasWrapAround:!0,spacing:[16,16]}),w=ct(this._rctx,_),y=new L(p,g);y.wrapMode=$.CLAMP_TO_EDGE;const h=new ht(this._rctx,y);this._rctx.bindFramebuffer(h),this._rctx.setViewport(0,0,p,g),this._rctx.useProgram(this._program),this._rctx.bindTexture(t.texture,0),this._rctx.bindTexture(w,1),this._quad.bind();const{width:f=0,height:x=0}=t.texture.descriptor;if(this._program.setUniform2f("u_srcImageSize",f,x),this._program.setUniform2fv("u_transformSpacing",_.spacing),this._program.setUniform2fv("u_transformGridSize",_.size),this._program.setUniform2f("u_targetImageSize",p,g),this._quad.draw(),this._quad.unbind(),this._rctx.useProgram(null),this._rctx.bindFramebuffer(null),w.dispose(),o){const{width:c,height:V}=h,u=new ImageData(c??0,V??0);h.readPixels(0,0,c??0,V??0,lt.RGBA,mt.UNSIGNED_BYTE,u.data);const G=h.detachColorTexture(j.COLOR_ATTACHMENT0);return h.dispose(),{texture:G,extent:i,imageData:u}}const b=h.detachColorTexture(j.COLOR_ATTACHMENT0);return h.dispose(),{texture:b,extent:i}}reprojectBitmapData(t,a){const o=X(t.bitmapData)?Z(t.bitmapData):t.bitmapData,i=new L;i.wrapMode=$.CLAMP_TO_EDGE,i.width=t.bitmapData.width,i.height=t.bitmapData.height;const r=new dt(this._rctx,i,o),s=this.reprojectTexture({texture:r,extent:t.extent},a,!0);s.texture.dispose();const l=document.createElement("canvas"),n=s.imageData;return l.width=n.width,l.height=n.height,l.getContext("2d").putImageData(n,0,0),{bitmapData:l,extent:s.extent}}async loadAndReprojectBitmapData(t,a,o){const i=(await z(t,{responseType:"image"})).data,r=document.createElement("canvas");r.width=i.width,r.height=i.height;const s=r.getContext("2d");s.drawImage(i,0,0);const l=s.getImageData(0,0,r.width,r.height);if(a.spatialReference.equals(o))return{bitmapData:l,extent:a};const n=this.reprojectBitmapData({bitmapData:l,extent:a},o);return{bitmapData:n.bitmapData,extent:n.extent}}destroy(){this._ownsRctx?(m._instanceRefCount--,m._instanceRefCount===0&&(this._quad.dispose(),this._program.dispose(),this._rctx.dispose(),m._instance=null)):(this._quad.dispose(),this._program.dispose())}}m._instanceRefCount=0;class q{constructor(){this.allSublayers=new Map,this.allPoints=[],this.allPolylines=[],this.allPolygons=[],this.allMapImages=[]}}let d=class extends et(rt){constructor(){super(...arguments),this._bitmapIndex=new Map,this._mapImageContainer=new it,this._kmlVisualData=new q,this._fetchController=null,this.allVisiblePoints=new P,this.allVisiblePolylines=new P,this.allVisiblePolygons=new P,this.allVisibleMapImages=new B}async hitTest(e,t){var o,i,r;const a=this.layer;return[(o=this._pointsView)==null?void 0:o.hitTest(e),(i=this._polylinesView)==null?void 0:i.hitTest(e),(r=this._polygonsView)==null?void 0:r.hitTest(e)].flat().filter(Boolean).map(s=>(s.layer=a,s.sourceLayer=a,{type:"graphic",graphic:s,layer:a,mapPoint:e}))}update(e){this._polygonsView&&this._polygonsView.processUpdate(e),this._polylinesView&&this._polylinesView.processUpdate(e),this._pointsView&&this._pointsView.processUpdate(e)}attach(){this._fetchController=new AbortController,this.container.addChild(this._mapImageContainer),this._polygonsView=new R({view:this.view,graphics:this.allVisiblePolygons,requestUpdateCallback:()=>this.requestUpdate(),container:new M(this.view.featuresTilingScheme)}),this.container.addChild(this._polygonsView.container),this._polylinesView=new R({view:this.view,graphics:this.allVisiblePolylines,requestUpdateCallback:()=>this.requestUpdate(),container:new M(this.view.featuresTilingScheme)}),this.container.addChild(this._polylinesView.container),this._pointsView=new R({view:this.view,graphics:this.allVisiblePoints,requestUpdateCallback:()=>this.requestUpdate(),container:new M(this.view.featuresTilingScheme)}),this.container.addChild(this._pointsView.container),this.addAttachHandles([this.allVisibleMapImages.on("change",e=>{e.added.forEach(t=>this._addMapImage(t)),e.removed.forEach(t=>this._removeMapImage(t))}),F(()=>this.layer.visibleSublayers,e=>{for(const t of this._kmlVisualData.allSublayers.values())t.visibility=0;for(const t of e){const a=this._kmlVisualData.allSublayers.get(t.id);a&&(a.visibility=1)}this._refreshCollections()})]),this._updatingHandles.addPromise(this._fetchService(this._fetchController.signal)),this._imageReprojector=new m}detach(){this._fetchController=O(this._fetchController),this._mapImageContainer.removeAllChildren(),this.container.removeAllChildren(),this._bitmapIndex.clear(),this._polygonsView=C(this._polygonsView),this._polylinesView=C(this._polylinesView),this._pointsView=C(this._pointsView),this._imageReprojector=C(this._imageReprojector)}viewChange(){this._polygonsView.viewChange(),this._polylinesView.viewChange(),this._pointsView.viewChange()}moveEnd(){}isUpdating(){return this._pointsView.updating||this._polygonsView.updating||this._polylinesView.updating}_addMapImage(e){var t,a;((t=this.view.spatialReference)!=null&&t.isWGS84||(a=this.view.spatialReference)!=null&&a.isWebMercator)&&this._imageReprojector.loadAndReprojectBitmapData(e.href,U.fromJSON(e.extent),this.view.spatialReference).then(o=>{const i=new tt(o.bitmapData);i.x=o.extent.xmin,i.y=o.extent.ymax,i.resolution=o.extent.width/o.bitmapData.width,i.rotation=e.rotation,this._mapImageContainer.addChild(i),this._bitmapIndex.set(e,i)})}async _getViewDependentUrl(e,t){const{viewFormat:a,viewBoundScale:o,httpQuery:i}=e;if(a!=null){if(t==null)throw new Error("Loading this network link requires a view state.");let r;if(await K(),o!=null&&o!==1){const c=new U(t.extent);c.expand(o),r=c}else r=t.extent;r=k(r,A.WGS84);const s=k(r,A.WebMercator),l=r.xmin,n=r.xmax,p=r.ymin,g=r.ymax,I=t.size[0]*t.pixelRatio,_=t.size[1]*t.pixelRatio,w=Math.max(s.width,s.height),y={"[bboxWest]":l.toString(),"[bboxEast]":n.toString(),"[bboxSouth]":p.toString(),"[bboxNorth]":g.toString(),"[lookatLon]":r.center.x.toString(),"[lookatLat]":r.center.y.toString(),"[lookatRange]":w.toString(),"[lookatTilt]":"0","[lookatHeading]":t.rotation.toString(),"[lookatTerrainLon]":r.center.x.toString(),"[lookatTerrainLat]":r.center.y.toString(),"[lookatTerrainAlt]":"0","[cameraLon]":r.center.x.toString(),"[cameraLat]":r.center.y.toString(),"[cameraAlt]":w.toString(),"[horizFov]":"60","[vertFov]":"60","[horizPixels]":I.toString(),"[vertPixels]":_.toString(),"[terrainEnabled]":"0","[clientVersion]":N,"[kmlVersion]":"2.2","[clientName]":"ArcGIS API for JavaScript","[language]":"en-US"},h=c=>{for(const V in c){let u;for(u in y)c[V]=c[V].replace(u,y[u])}},f=E(a);h(f);let x={};i!=null&&(x=E(i),h(x));const b=Q(e.href);return b.query={...b.query,...f,...x},`${b.path}?${W(f)}`}return e.href}async _fetchService(e){const t=new q;await this._loadVisualData(this.layer.url,t,e),this._kmlVisualData=t,this._refreshCollections()}_refreshCollections(){this.allVisiblePoints.removeAll(),this.allVisiblePolylines.removeAll(),this.allVisiblePolygons.removeAll(),this.allVisibleMapImages.removeAll(),this.allVisiblePoints.addMany(this._kmlVisualData.allPoints.filter(e=>this._isSublayerVisible(e.sublayerId)).map(({item:e})=>e)),this.allVisiblePolylines.addMany(this._kmlVisualData.allPolylines.filter(e=>this._isSublayerVisible(e.sublayerId)).map(({item:e})=>e)),this.allVisiblePolygons.addMany(this._kmlVisualData.allPolygons.filter(e=>this._isSublayerVisible(e.sublayerId)).map(({item:e})=>e)),this.allVisibleMapImages.addMany(this._kmlVisualData.allMapImages.filter(e=>this._isSublayerVisible(e.sublayerId)).map(({item:e})=>e))}_isSublayerVisible(e){const t=this._kmlVisualData.allSublayers.get(e);return!!(t!=null&&t.visibility)&&(t.parentFolderId===-1||this._isSublayerVisible(t.parentFolderId))}_loadVisualData(e,t,a){return this._fetchParsedKML(e,a).then(async o=>{for(const i of o.sublayers){t.allSublayers.set(i.id,i);const r=i.points?await D(i.points):[],s=i.polylines?await D(i.polylines):[],l=i.polygons?await D(i.polygons):[],n=i.mapImages||[];if(t.allPoints.push(...r.map(p=>({item:p,sublayerId:i.id}))),t.allPolylines.push(...s.map(p=>({item:p,sublayerId:i.id}))),t.allPolygons.push(...l.map(p=>({item:p,sublayerId:i.id}))),t.allMapImages.push(...n.map(p=>({item:p,sublayerId:i.id}))),i.networkLink){const p=await this._getViewDependentUrl(i.networkLink,this.view.state);await this._loadVisualData(p,t,a)}}})}_fetchParsedKML(e,t){return J(e,this.layer.spatialReference,this.layer.refreshInterval,t).then(a=>Y(a.data))}_removeMapImage(e){const t=this._bitmapIndex.get(e);t&&(this._mapImageContainer.removeChild(t),this._bitmapIndex.delete(e))}};v([S()],d.prototype,"_pointsView",void 0),v([S()],d.prototype,"_polylinesView",void 0),v([S()],d.prototype,"_polygonsView",void 0),v([S()],d.prototype,"updating",void 0),d=v([H("esri.views.2d.layers.KMLLayerView2D")],d);const We=d;export{We as default};
