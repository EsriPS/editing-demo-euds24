import{br as ee,cu as Le,aO as J,M as De,c5 as xe,aA as G,bH as Ce,aF as Ae,cA as be,cS as se,c1 as we,F as E,G as D,K as Oe}from"./index-C1aGfQcb.js";import{S as Re}from"./MultiOriginJSONSupport-Qqzd52Lf.js";import{f as _e}from"./Layer-CneDw8eF.js";import{o as V}from"./featureConversionUtils-C-Uqf9Q4.js";import{s as ve}from"./OptimizedGeometry-C9mSZhHi.js";import{u as Y,E as Se,A as Ge,b as Pe,v as He,L as Fe,m as $e,h as Ue,a as Be,f as ze,d as x,s as F,t as X,r as Z,e as We,n as N,o as Me,g as je,c as ke,i as Qe}from"./KnowledgeGraphSublayer-BaVgHV0Y.js";import{l as Ve}from"./BlendLayer-CG9LFMxd.js";import{b as Ye}from"./OperationalLayer-nNeN4Mrb.js";import{t as qe}from"./ScaleRangeLayer-66YiyNPI.js";import{F as Ke}from"./knowledgeGraphService-DNo9v-NN.js";import"./TimeExtent-DGiXUfis.js";import"./timeUtils-X0MXjtQ8.js";import"./OptimizedFeature-swgcyHeh.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./projection-BOBOhWzm.js";import"./projectBuffer-CZ7yaGuo.js";import"./GraphicsLayer-7fnK8PA0.js";import"./GraphicsCollection-BlUFPpxh.js";import"./ElevationInfo-D7CBP7sd.js";import"./lengthUtils-CFwdZ3dz.js";import"./Relationship-BBxoC4jd.js";import"./Query-LPs1Zyw4.js";import"./FullTextSearch-Cza0yp3f.js";import"./UniqueValueRenderer-CAZbf8NT.js";import"./RendererLegendOptions-CULirduz.js";import"./diffUtils-DMLidw0V.js";import"./colorRamps-D4VCsfmX.js";import"./sizeVariableUtils-Cmcuvw-4.js";import"./visualVariableUtils-dx28E4EQ.js";import"./jsonUtils-BWWcP_yB.js";import"./defaults-Dbnhuv3C.js";import"./defaultsJSON-GKolV7NZ.js";import"./styleUtils-CEgUrR2a.js";import"./jsonUtils-CWFaUb2E.js";import"./LRUCache-DbPTy7LA.js";import"./Version-DD-eRUXC.js";import"./FieldsIndex-BrdRr9E_.js";import"./UnknownTimeZone-DhxWDwo9.js";import"./OverrideHelper-D-UVQ00R.js";import"./colorUtils-BWiljOUv.js";import"./vec42-BHDxGccW.js";import"./vec4f64-o2zAXfmz.js";import"./utils-D7agaEG-.js";import"./enums-CmIX1y88.js";import"./quantizationUtils-DbJV_fl5.js";import"./heatmapUtils-D0BPLm9w.js";import"./workers-CeelWDzo.js";import"./FeatureStore-B0gqZoOR.js";import"./BoundsStore-DO_rtT_2.js";import"./PooledRBush-D_zSRdWq.js";import"./quickselect-QQC62dOK.js";import"./timeSupport-DZeNU3Q4.js";import"./queryUtils-DfwPGxwH.js";import"./normalizeUtils-Bg1OALXh.js";import"./normalizeUtilsCommon-UUlRRPVA.js";import"./utils-DGPHbhMN.js";import"./utils-ByvCMLXh.js";import"./json-Wa8cmqdu.js";import"./optimizedFeatureQueryEngineAdapter-DrXZKbZy.js";import"./centroid-DdLmOD72.js";import"./QueryEngine-C9ivs0Pi.js";import"./WhereClause-dg9O4EEg.js";import"./TimeOnly-vNYE6bX9.js";import"./QueryEngineCapabilities-DjYb9CEb.js";import"./utils-fVaXlGs2.js";import"./utils-D5wrSxig.js";import"./ClassBreaksDefinition-CpzZK_QT.js";import"./SnappingCandidate-O5eRSE6e.js";import"./Scheduler-DS_v5N7L.js";import"./signal-CRiDvIIF.js";import"./debugFlags-CfZYxH5Q.js";import"./clientSideDefaults-DxRAc8q_.js";import"./capabilities-Y9lFlGVh.js";import"./fieldProperties-CoDAhoou.js";import"./FeatureEffectLayer-gWJrS8gr.js";import"./FeatureEffect-B5YAe6Lk.js";import"./jsonUtils-n3e_wlfQ.js";import"./parser-C4Qiz3JH.js";import"./utils-sqJe3zMg.js";import"./FeatureReductionLayer-DuxcLofN.js";import"./commonProperties-Drl05DKJ.js";import"./FeatureReductionSelection-tRCh97wj.js";import"./featureLayerUtils-Dy99w2fj.js";import"./labelingInfo-BV0df7F6.js";import"./labelUtils-C_ZaLudT.js";import"./MD5-C9MwAd2G.js";import"./OrderedLayer-B8Gw_A9P.js";import"./OrderByInfo-k2G4k_zV.js";import"./RefreshableLayer-CwxQNwd3.js";import"./TemporalLayer-CR5q7V2k.js";import"./TimeInfo-CY1-cj-U.js";import"./FeatureSet-CeKoTEEO.js";import"./popupUtils-BA1X4qoc.js";var te;(function(e){e.MULTIPLIER="multiplier",e.ABSOLUTE="absoluteValue"})(te||(te={}));let k=class extends Ye(Ve(qe(Re(_e)))){constructor(e){if(super(e),this.dataPreloadedInLocalCache=!1,this.defaultLinkChartConfig=null,this._currentLinkChartConfig={layoutMode:"RADIAL_TREE"},this._graphTypeLookup=new Map,this.dataManager=null,this.knowledgeGraph=null,this.layers=new(ee.ofType(Y)),this.entityLinkChartDiagramLookup=new Map,this.relationshipLinkChartDiagramLookup=new Map,this.linkChartExtent=new Le({xmin:-1e-7,ymin:-1e-7,xmax:1e-7,ymax:1e-7}),this.memberEntityTypes=null,this.memberRelationshipTypes=null,this.operationalLayerType="LinkChartLayer",this.sublayerIdsCache=new Map,this.tables=new(ee.ofType(Y)),this.type="link-chart",this.chronologicalAuxiliaryGraphics=null,this._originalInclusionList=e==null?void 0:e.inclusionModeDefinition,(e==null?void 0:e.dataPreloadedInLocalCache)&&!(e!=null&&e.inclusionModeDefinition))throw new J("knowledge-graph:linkchart-layer-constructor","If creating a link chart composite layer and configured that data is already loaded in the cache, you must specify an inclusion list so the Composite Layer knows what records belong to it");this.addHandles(De(()=>this.layers.concat(this.tables),(t,a)=>this._handleSublayersChange(t,a),xe))}normalizeCtorArgs(e){if(!e)return{};const{url:t,title:a,dataPreloadedInLocalCache:i,defaultLinkChartConfig:o}=e;return{url:t,title:a,dataPreloadedInLocalCache:i,defaultLinkChartConfig:o}}_initializeLayerProperties(e){var r,d,y,L,g,f;if(!this.title&&this.url){const s=this.url.split("/");this.title=s[s.length-2]}const t=new Set;let a=[],i=[];if(e.inclusionModeDefinition&&(!e.inclusionModeDefinition.namedTypeDefinitions||e.inclusionModeDefinition.namedTypeDefinitions.size<1))throw new J("knowledge-graph:composite-layer-constructor","If an explicit inclusion definition is defined, at least one namedTypeDefinition must also be defined");(r=e.knowledgeGraph.dataModel.entityTypes)==null||r.forEach(s=>{s.name&&this._graphTypeLookup.set(s.name,s)}),(d=e.knowledgeGraph.dataModel.relationshipTypes)==null||d.forEach(s=>{s.name&&this._graphTypeLookup.set(s.name,s)}),(y=e.inclusionModeDefinition)!=null&&y.generateAllSublayers?(a=e.knowledgeGraph.dataModel.entityTypes??[],i=e.knowledgeGraph.dataModel.relationshipTypes??[]):(L=e.inclusionModeDefinition)!=null&&L.namedTypeDefinitions&&((g=e.inclusionModeDefinition)==null?void 0:g.namedTypeDefinitions.size)>0?(f=e.inclusionModeDefinition)==null||f.namedTypeDefinitions.forEach((s,u)=>{var R,T;const C=this._graphTypeLookup.get(u);if(!C)return G.getLogger(this).warn(`A named type, ${u}, was in the inclusion list that wasn't in the data model and will be removed`),void((R=e.inclusionModeDefinition)==null?void 0:R.namedTypeDefinitions.delete(u));C.type==="relationship"?t.has(u)||(t.add(u),i.push(C)):C.type==="entity"?t.has(u)||(t.add(u),a.push(C)):(G.getLogger(this).warn(`A named type, ${u}, was in the inclusion list that wasn't properly modeled and will be removed`),(T=e.inclusionModeDefinition)==null||T.namedTypeDefinitions.delete(u))}):(a=e.knowledgeGraph.dataModel.entityTypes??[],i=e.knowledgeGraph.dataModel.relationshipTypes??[]);const o=new Se({knowledgeGraph:e.knowledgeGraph,inclusionModeDefinition:e.inclusionModeDefinition});this.knowledgeGraph=e.knowledgeGraph,this.memberEntityTypes=a,this.memberRelationshipTypes=i,this.dataManager=o}load(e){const t=async()=>{var o;const a=[],i=[];this.loadLayerAssumingLocalCache(),await ke(this),this.dataManager.inclusionModeDefinition&&(this.dataManager.inclusionModeDefinition.generateAllSublayers=!1),(o=this.dataManager.inclusionModeDefinition)==null||o.namedTypeDefinitions.forEach(r=>{r.useAllData=!1}),await this._initializeDiagram(),this.layers.forEach(r=>{i.push(r.refreshCachedQueryEngine()),a.push(new Promise(d=>{r.on("layerview-create",()=>{d(null)})}))}),this.tables.forEach(r=>{i.push(r.refreshCachedQueryEngine())}),await Promise.all(i)};return this.addResolvingPromise(new Promise(a=>{Ke(this.url).then(async i=>{var o,r,d,y,L,g,f;if(this._initializeLayerProperties({knowledgeGraph:i,inclusionModeDefinition:this._originalInclusionList}),(r=(o=this.dataManager.inclusionModeDefinition)==null?void 0:o.namedTypeDefinitions)!=null&&r.size||(this.dataManager.inclusionModeDefinition={generateAllSublayers:!1,namedTypeDefinitions:new Map},(d=this.dataManager.knowledgeGraph.dataModel.entityTypes)==null||d.forEach(s=>{var u;s.name&&((u=this.dataManager.inclusionModeDefinition)==null||u.namedTypeDefinitions.set(s.name,{useAllData:!0}))}),(y=this.dataManager.knowledgeGraph.dataModel.relationshipTypes)==null||y.forEach(s=>{var u;s.name&&((u=this.dataManager.inclusionModeDefinition)==null||u.namedTypeDefinitions.set(s.name,{useAllData:!0}))})),this.dataPreloadedInLocalCache){const s=Qe.getInstance();for(const[u,C]of((L=this.dataManager.inclusionModeDefinition)==null?void 0:L.namedTypeDefinitions)??[])for(const R of((g=C.members)==null?void 0:g.values())??[]){const T=s.readFromStoreById(`${u}__${R.id}`);T&&Ce(this.dataManager.sublayerCaches,u,()=>new Map).set(R.id,T)}await t()}else{const s=((f=this.defaultLinkChartConfig)==null?void 0:f.layoutMode)==="GEOGRAPHIC";this.addResolvingPromise(this.dataManager.refreshCacheContent(void 0,!1,s,!0).then(async()=>{Ae(e),await t()}))}a(null)})})),Promise.resolve(this)}async addRecords(e,t){let a=[];t!=null&&t.cascadeAddRelationshipEndNodes&&this.dataManager.knowledgeGraph.dataModel&&(a=await Ge(e,this.dataManager.knowledgeGraph));const i=e.concat(a).filter(o=>{var r;return!((r=this.sublayerIdsCache.get(o.typeName))!=null&&r.has(o.id))});await this._handleNewRecords(i)}async removeRecords(e,{cascadeRemoveRelationships:t=!0,recalculateLayout:a=!1}={cascadeRemoveRelationships:!0,recalculateLayout:!1}){var r,d,y,L,g,f,s,u;let i=[];for(const C of e)((y=(d=(r=this.dataManager.inclusionModeDefinition)==null?void 0:r.namedTypeDefinitions)==null?void 0:d.get(C.typeName))==null?void 0:y.useAllData)===!1&&((s=(f=(g=(L=this.dataManager.inclusionModeDefinition)==null?void 0:L.namedTypeDefinitions)==null?void 0:g.get(C.typeName))==null?void 0:f.members)!=null&&s.has(C.id))&&i.push(C);if(t){const C=new Set,R=[];for(const T of i)if(this.dataManager.nodeConnectionsLookup.has(T.id))for(const z of this.dataManager.nodeConnectionsLookup.get(T.id))C.add(z);for(const T of C)if(this.dataManager.memberIdTypeLookup.has(T))for(const z of this.dataManager.memberIdTypeLookup.get(T))this.dataManager.relationshipTypeNames.has(z)&&R.push({id:T,typeName:z});i=i.concat(R)}this.dataManager.removeFromLayer(i);for(const C of i)(u=this.sublayerIdsCache.get(C.typeName))==null||u.delete(C.id),this.dataManager.relationshipTypeNames.has(C.typeName)?this.relationshipLinkChartDiagramLookup.delete(C.id):this.entityLinkChartDiagramLookup.delete(C.id);a&&await this._calculateLayoutWithSublayerTimeInfo(this._currentLinkChartConfig.layoutMode,this._currentLinkChartConfig.layoutOptions);const o=[];return this.layers.forEach(C=>{o.push(C.refreshCachedQueryEngine())}),await Promise.all(o),this._refreshNamedTypes(),i}async expand(e,t){const a=await this.dataManager.getConnectedRecordIds(e,t),i=a.filter(o=>{var r;return!((r=this.sublayerIdsCache.get(o.typeName))!=null&&r.has(o.id))});return await this._handleNewRecords(a),{records:i}}loadLayerAssumingLocalCache(){var t,a;const e=[...this.memberRelationshipTypes,...this.memberEntityTypes];this.originIdOf("layers")===be.DEFAULTS?this._createSublayers(e,this.layers,i=>!!i.geometryType):this._updateSublayers(e,this.layers),this.originIdOf("tables")===be.DEFAULTS?this._createSublayers(e,this.tables,i=>!i.geometryType):this._updateSublayers(e,this.tables),(a=(t=this.dataManager.inclusionModeDefinition)==null?void 0:t.namedTypeDefinitions)==null||a.forEach((i,o)=>{var d;const r=Ce(this.sublayerIdsCache,o,()=>new Set);(d=i.members)==null||d.forEach(({id:y,linkChartLocation:L})=>{if(r.add(y),L){const g=L instanceof ve?L:V(L);this.dataManager.relationshipTypeNames.has(o)?this.relationshipLinkChartDiagramLookup.set(y,g):this.entityLinkChartDiagramLookup.set(y,g)}})})}async calculateLinkChartLayout(e="RADIAL_TREE",t){var ce,ye,me,ge;const a=[],i=[],o=[];this.dataManager.sublayerCaches.forEach((n,l)=>{this.dataManager.entityTypeNames.has(l)?n.forEach(p=>{a.push({typeName:l,feature:p})}):this.dataManager.relationshipTypeNames.has(l)&&n.forEach(p=>{i.push({typeName:l,feature:p})})}),this.entityLinkChartDiagramLookup=new Map,this.relationshipLinkChartDiagramLookup=new Map;const r=new Map,d=new Map,y=new Map,L=new Map,g=new Uint8Array(a.length),f=new Float64Array(a.length),s=new Float64Array(a.length),u=new Float64Array(a.length),C=new Float64Array(a.length),R=new Uint32Array(i.length),T=new Uint32Array(i.length),z=new Float64Array(i.length),le=new Float64Array(i.length),b=[],Te="FORCE_DIRECTED",_=new Le({xmin:-1e-7,ymin:-1e-7,xmax:1e-7,ymax:1e-7});let W,he="FORCE_DIRECTED",m=0,A=0;const Ee=Pe.apply;switch(he=e==="GEOGRAPHIC"?Te:e,he){case"FORCE_DIRECTED":W=ze.apply;break;case"COMMUNITY":W=Be.apply;break;case"HIERARCHICAL":W=Ue.apply;break;case"RADIAL_TREE":W=$e.apply;break;case"SMART_TREE":W=Fe.apply;break;default:W=He.apply}let ae=!1;a.forEach(({typeName:n,feature:l})=>{var p,$,U,w,O;if(e!=="CHRONOLOGICAL_SINGLE"&&e!=="CHRONOLOGICAL_MULTIPLE"&&((p=t==null?void 0:t.lockedNodeLocations)!=null&&p.has(l.attributes[x]))){e==="GEOGRAPHIC"&&this.dataManager.geographicLookup.has(n)?g[m]=F.IsGeographic:g[m]=F.None;const h=t.lockedNodeLocations.get(l.attributes[x]);f[m]=h.x,s[m]=h.y}else if(e==="GEOGRAPHIC"&&this.dataManager.geographicLookup.has(n)){g[m]=F.IsGeographic;let h=null;const M=l.attributes[this.dataManager.geographicLookup.get(n).name];switch(($=this.dataManager.geographicLookup.get(n))==null?void 0:$.geometryType){case"esriGeometryPoint":f[m]=M==null?void 0:M.x,s[m]=M==null?void 0:M.y;break;case"esriGeometryPolygon":h=M==null?void 0:M.centroid,(h==null?void 0:h.x)!=null&&(h==null?void 0:h.y)!=null?(f[m]=h.x,s[m]=h.y):g[m]=F.IsMovable;break;case"esriGeometryPolyline":case"esriGeometryMultipoint":h=(U=M==null?void 0:M.extent)==null?void 0:U.center,(h==null?void 0:h.x)!=null&&(h==null?void 0:h.y)!=null?(f[m]=h.x,s[m]=h.y):g[m]=F.IsMovable;break;default:g[m]=F.IsMovable}(f[m]==null||s[m]==null||Number.isNaN(f[m])||Number.isNaN(s[m]))&&(g[m]=F.IsMovable,f[m]=0,s[m]=0)}else if(e==="CHRONOLOGICAL_SINGLE"||e==="CHRONOLOGICAL_MULTIPLE"){!ae&&((w=t==null?void 0:t.lockedNodeLocations)!=null&&w.has(l.attributes[x]))&&(ae=!0);const h=(O=t==null?void 0:t.timeInfoByTypeName)==null?void 0:O.get(n),M=h==null?void 0:h.startField,v=M&&(h!=null&&h.startField)?l.attributes[M]:null;u[m]=v?new Date(v).getTime():NaN;const P=h==null?void 0:h.endField,H=P&&(h!=null&&h.endField)?l.attributes[P]:null;C[m]=H?new Date(H).getTime():NaN,f[m]=0,s[m]=0,g[m]=F.IsMovable}else g[m]=F.IsMovable,f[m]=0,s[m]=0;L.set(l.attributes[x],m),b[m]={feature:l,typeName:n},m++}),ae&&G.getLogger(this).warn("Locked node locations are not supported for chronological layout at this time.  Requested node locations were ignored");let pe=!1;const ie=new Map;i.forEach(n=>{var P;const l=n.feature.attributes[X],p=n.feature.attributes[Z],$=L.get(l),U=L.get(p),w=(P=t==null?void 0:t.timeInfoByTypeName)==null?void 0:P.get(n.typeName),O=t!=null&&t.timeInfoByTypeName?w==null?void 0:w.startField:null,h=O?n.feature.attributes[O]:null,M=w==null?void 0:w.endField,v=M?n.feature.attributes[M]:null;if($!==void 0&&U!==void 0){let H=l+"-"+p;e!=="CHRONOLOGICAL_SINGLE"&&e!=="CHRONOLOGICAL_MULTIPLE"||(H=H+"-"+h+"-"+v);const j=ie.get(H);(j==null?void 0:j.has(n.typeName))||(R[A]=$,T[A]=U,e!=="CHRONOLOGICAL_SINGLE"&&e!=="CHRONOLOGICAL_MULTIPLE"||(z[A]=h?new Date(h).getTime():NaN,le[A]=v?new Date(v).getTime():NaN),j===void 0?ie.set(H,new Map([[n.typeName,A]])):j.set(n.typeName,A),A++),o.push(n)}else pe=!0,this.relationshipLinkChartDiagramLookup.set(l,null)}),pe&&G.getLogger(this).warn("A relationship is a member of this layer that has either origin or destination entity nodes that are not members. The diagram geometry will be set to null");const de=this._validateLayoutSettings(e,t),ne=this._convertLayoutSettingsToCalculationSettings(de);await We();let q=!1,I=null;if(e==="CHRONOLOGICAL_SINGLE"||e==="CHRONOLOGICAL_MULTIPLE"){let n;({success:q,links:I,graphics:n}=Ee(g,f,s,u,C,R.subarray(0,A),T.subarray(0,A),z.subarray(0,A),le.subarray(0,A),e==="CHRONOLOGICAL_MULTIPLE",(t==null?void 0:t.chronologicalLayoutSettings)??{})),q&&(this.chronologicalAuxiliaryGraphics=n)}else({success:q,links:I}=W(g,f,s,R.subarray(0,A),T.subarray(0,A),ne.computationBudgetTime,ne.idealEdgeLengthMultiplier,ne.repulsionRadiusMultiplier));if(!q)throw new J("knowledge-graph:layout-failed","Attempting to arrange the records in the specified layout failed");for(let n=0;n<b.length;n++){if(s[n]>84.9999?s[n]=84.9999:s[n]<-84.9999&&(s[n]=-84.9999),f[n]>179.9999?f[n]=179.9999:f[n]<-179.9999&&(f[n]=-179.9999),b[n].feature.attributes[N]=new se(f[n],s[n]),r.has(b[n].typeName)){const p=r.get(b[n].typeName);p==null||p.set(b[n].feature.attributes[x],b[n].feature)}else{const p=new Map;p.set(b[n].feature.attributes[x],b[n].feature),r.set(b[n].typeName,p)}y.set(b[n].feature.attributes[x],b[n].feature);const l=V(b[n].feature.attributes[N]);this.entityLinkChartDiagramLookup.set(b[n].feature.attributes[x],b[n].feature.attributes[N]?l:null),b[n].feature.attributes[N].x<_.xmin&&(_.xmin=b[n].feature.attributes[N].x),b[n].feature.attributes[N].x>_.xmax&&(_.xmax=b[n].feature.attributes[N].x),b[n].feature.attributes[N].y<_.ymin&&(_.ymin=b[n].feature.attributes[N].y),b[n].feature.attributes[N].y>_.ymax&&(_.ymax=b[n].feature.attributes[N].y)}if(this.linkChartExtent.xmin=_.xmin,this.linkChartExtent.xmax=_.xmax,this.linkChartExtent.ymin=_.ymin,this.linkChartExtent.ymax=_.ymax,!I)throw new J("knowledge-graph:layout-failed","Attempting to retrieve link geometry from diagram engine failed");const K=new Map,oe=new Map,re=new Map,ue=new Set;for(let n=0;n<o.length;n++){const l=[],p=o[n],$=p.feature.attributes[X],U=p.feature.attributes[Z];let w=$+"-"+U;if(e==="CHRONOLOGICAL_SINGLE"||e==="CHRONOLOGICAL_MULTIPLE"){const c=(ce=t==null?void 0:t.timeInfoByTypeName)==null?void 0:ce.get(p.typeName),S=t!=null&&t.timeInfoByTypeName?c==null?void 0:c.startField:null,B=S?p.feature.attributes[S]:null,Q=c==null?void 0:c.endField;w+="-"+B+"-"+(Q?p.feature.attributes[Q]:null)}const O=ie.get(w).get(p.typeName),h=O===0?0:I==null?void 0:I.vertexEndIndex[O-1];if(!ue.has(O)){if(ue.add(O),I.types[O]===Me.Recursive){const c=[I.vertices[2*h],I.vertices[2*h+1]],S=[I.vertices[2*(h+1)],I.vertices[2*(h+1)+1]],B=[.5*(c[0]+S[0]),.5*(c[1]+S[1])],Q=[B[0]-c[0],B[1]-c[1]],Ne=[B[0]+Q[1],B[1]-Q[0]],Ie=[B[0]-Q[1],B[1]+Q[0]];l.push(c),l.push(Ne),l.push(S),l.push(Ie),l.push(c)}else{if(I.types[O]!==Me.Regular){G.getLogger(this).warn("A relationship generated an unsupported link geometry type.  It will not be rendered");continue}for(let c=h;c<I.vertexEndIndex[O];c++)l.push([I.vertices[2*c],I.vertices[2*c+1]])}if(e!=="CHRONOLOGICAL_SINGLE"&&e!=="CHRONOLOGICAL_MULTIPLE"){const c=(ye=b[L.get($)])==null?void 0:ye.feature.attributes[N],S=(me=b[L.get(U)])==null?void 0:me.feature.attributes[N];l[0][0]===c.x&&l[0][1]===c.y||(l[0]=[c.x,c.y]),l[l.length-1][0]===S.x&&l[l.length-1][1]===S.y||(l[l.length-1]=[S.x,S.y])}for(let c=1;c<l.length-1;c++)l[c][1]>85.5?l[c][1]=85.5:l[c][1]<-85.5&&(l[c][1]=-85.5),l[c][0]>179.9999?l[c][0]=179.9999:l[c][0]<-179.9999&&(l[c][0]=-179.9999);K.has(w)?K.get(w).push(l):K.set(w,[l])}const M=K.get(w);oe.has(w)||(oe.set(w,new Map),re.set(w,new Map));const v=oe.get(w),P=re.get(w);v.has(p.typeName)||(v.set(p.typeName,M.shift()),P.set(p.typeName,0));const H=v.get(p.typeName);P.set(p.typeName,P.get(p.typeName)+1);const j=new we({paths:[H]});if(p.feature.attributes[N]=j,d.has(p.typeName)){const c=d.get(p.typeName);c==null||c.set(p.feature.attributes[x],p.feature)}else{const c=new Map;c.set(p.feature.attributes[x],p.feature),d.set(p.typeName,c)}y.set(p.feature.attributes[x],p.feature);const fe=V(p.feature.attributes[N]);this.relationshipLinkChartDiagramLookup.set(p.feature.attributes[x],p.feature.attributes[N]?fe:null)}for(const n of o)n.feature.attributes[je]=((ge=re.get(n.feature.attributes[X]+"-"+n.feature.attributes[Z]))==null?void 0:ge.get(n.typeName))??null;return this._currentLinkChartConfig={layoutMode:e,layoutOptions:de},{nodes:r,links:d,idMap:y}}async applyNewLinkChartLayout(e="RADIAL_TREE",t){const a=[];await this._calculateLayoutWithSublayerTimeInfo(e,t),this.layers.forEach(i=>{a.push(i.refreshCachedQueryEngine())}),await Promise.all(a),this._refreshNamedTypes()}getCurrentNodeLocations(){var t,a;const e=new Map;return(a=(t=this.dataManager.inclusionModeDefinition)==null?void 0:t.namedTypeDefinitions)==null||a.forEach(i=>{var o;(o=i==null?void 0:i.members)==null||o.forEach(r=>{const d=r.linkChartLocation;let y;const L=r.id;d&&(y="x"in d?{x:d.x,y:d.y}:{x:d.coords[0],y:d.coords[1]},e.set(L,new se({x:y.x,y:y.y})))})}),e}async synchronizeInclusionListWithCache(){return new Promise(e=>{var t;(t=this.dataManager.inclusionModeDefinition)==null||t.namedTypeDefinitions.forEach((a,i)=>{if(a.useAllData=!1,a.members&&a.members.size>0){if(!this.dataManager.sublayerCaches.get(i))return;const o=new Set(Array.from(this.dataManager.sublayerCaches.get(i).keys()));Array.from(a.members.keys()).filter(r=>!o.has(r)).forEach(r=>{var d;(d=a.members)==null||d.delete(r)})}}),e()})}async refreshLinkChartCache(e){await this.dataManager.refreshCacheContent(e);const t=[];this.layers.forEach(a=>{t.push(a.refreshCachedQueryEngine())}),await Promise.all(t),this._refreshNamedTypes()}async connectBetweenEntities(e){let t=[];for(const i of this.dataManager.relationshipTypeNames){const o=this.sublayerIdsCache.get(i);o&&(t=t.concat(Array.from(o.keys())))}const a=await this.dataManager.getRelationshipsBetweenNodes(e,t);return await this._handleNewRecords(a),{records:a}}async connectFromEntities(e){let t=[];for(const o of this.dataManager.relationshipTypeNames){const r=this.sublayerIdsCache.get(o);r&&(t=t.concat(Array.from(r.keys())))}let a=[];for(const o of this.dataManager.entityTypeNames){const r=this.sublayerIdsCache.get(o);r&&(a=a.concat(Array.from(r)))}const i=await this.dataManager.getRelationshipsFromNodes(e,a,t);return await this._handleNewRecords(i),{records:i}}getCurrentLayout(){return this._currentLinkChartConfig.layoutMode}async _calculateLayoutWithSublayerTimeInfo(e="RADIAL_TREE",t){const a=new Map;this.layers.forEach(i=>{a.set(i.objectType.name,i.timeInfo)}),await this.calculateLinkChartLayout(e,{timeInfoByTypeName:a,...t})}async _handleNewRecords(e){const t=[];this.dataManager.addToLayer(e);for(const i of e)this.sublayerIdsCache.has(i.typeName)||(this.sublayerIdsCache.set(i.typeName,new Set),t.push(i.typeName)),this.sublayerIdsCache.get(i.typeName).add(i.id);for(const i of t){const o=this._graphTypeLookup.get(i);if(o){const r=this._createSublayer(o);o.type==="entity"?this.dataManager.entityTypeNames.add(i):this.dataManager.relationshipTypeNames.add(i),r.geometryType?this.layers.push(r):this.tables.push(r),this.dataManager.sublayerCaches.set(i,new Map)}}await ke(this,t),await this.dataManager.refreshCacheContent(e.map(i=>i.id));const a=Object.assign({},this._currentLinkChartConfig.layoutOptions);a.lockedNodeLocations=new Map;for(const[i,o]of this.entityLinkChartDiagramLookup.entries())o&&a.lockedNodeLocations.set(i,new se(o.coords[0],o.coords[1]));await this.applyNewLinkChartLayout(this._currentLinkChartConfig.layoutMode,a)}_createSublayers(e,t,a){e.forEach(i=>{const o=this._createSublayer(i);a(o)&&t.push(o),this._updateSublayerCaches(i)})}_updateSublayers(e,t){t.forEach(a=>{a.parentCompositeLayer=this;const i=e.find(o=>o.type===a.graphType&&o.name===a.graphTypeName);i&&(a.objectType=i,a.read({title:i.name},{origin:"service"}),this._updateSublayerCaches(i))})}_updateSublayerCaches(e){const t=this.dataManager.sublayerCaches;t.has(e.name)||t.set(e.name,new Map)}async _initializeDiagram(){var e,t;this.defaultLinkChartConfig?this.defaultLinkChartConfig.doNotRecalculateLayout?((t=(e=this.dataManager.inclusionModeDefinition)==null?void 0:e.namedTypeDefinitions)==null||t.forEach((a,i)=>{var o;(o=a==null?void 0:a.members)==null||o.forEach(r=>{const d=r.linkChartLocation;let y;const L=r.id;if(!d)return;y="x"in d?{x:d.x,y:d.y}:{x:d.coords[0],y:d.coords[1]};const g=V(y);this.dataManager.relationshipTypeNames.has(i)?this.relationshipLinkChartDiagramLookup.set(L,g):this.entityLinkChartDiagramLookup.set(L,g),this.linkChartExtent.xmin>y.x&&(this.linkChartExtent.xmin=y.x),this.linkChartExtent.xmax<y.x&&(this.linkChartExtent.xmax=y.x),this.linkChartExtent.ymin>y.y&&(this.linkChartExtent.ymin=y.y),this.linkChartExtent.ymax<y.y&&(this.linkChartExtent.ymax=y.y)})}),this.memberRelationshipTypes.forEach(a=>{var i;a.name&&((i=this.dataManager.sublayerCaches.get(a.name))==null||i.forEach(o=>{const r=this.relationshipLinkChartDiagramLookup.get(o.attributes[X]),d=this.relationshipLinkChartDiagramLookup.get(o.attributes[Z]);if(r&&d){const y=V(new we({paths:[[[r.coords[0],r.coords[1]],[d.coords[0],d.coords[1]]]]}));this.relationshipLinkChartDiagramLookup.set(o.attributes[x],y)}else this.relationshipLinkChartDiagramLookup.set(o.attributes[x],null)}))})):await this._calculateLayoutWithSublayerTimeInfo(this.defaultLinkChartConfig.layoutMode,{lockedNodeLocations:this.getCurrentNodeLocations(),...this.defaultLinkChartConfig.layoutOptions||{}}):await this._calculateLayoutWithSublayerTimeInfo("RADIAL_TREE",{lockedNodeLocations:this.getCurrentNodeLocations()})}_refreshNamedTypes(){for(const e of this.layers)e.emit("refresh",{dataChanged:!0});for(const e of this.tables)e.emit("refresh",{dataChanged:!0})}_validateLayoutSettings(e,t){const a=u=>typeof u=="number"&&!isNaN(u),i=u=>a(u)&&u>=1,o=u=>a(u)&&u>=1,r=u=>Object.values(te).includes(u),d=u=>a(u)&&u>=0,y={organicLayoutSettings:{},chronologicalLayoutSettings:{}};if(!new Set(["FORCE_DIRECTED","COMMUNITY","GEOGRAPHIC","CHRONOLOGICAL_MULTIPLE","CHRONOLOGICAL_SINGLE"]).has(e)||!t)return y;t.organicLayoutSettings??(t.organicLayoutSettings={});const{computationBudgetTime:L,repulsionRadiusMultiplier:g,idealEdgeLength:f,idealEdgeLengthType:s}=t.organicLayoutSettings;if(o(L)?y.organicLayoutSettings.computationBudgetTime=L:L!==void 0&&G.getLogger(this).warn("Invalid layout computationBudgetTime setting, will revert to default setting"),i(g)?y.organicLayoutSettings.repulsionRadiusMultiplier=g:g!==void 0&&G.getLogger(this).warn("Invalid layout repulsionRadiusMultiplier setting, will revert to default setting"),e==="GEOGRAPHIC"&&(f!==void 0||s!==void 0)&&(r(s)?y.organicLayoutSettings.idealEdgeLengthType=s:s!==void 0&&G.getLogger(this).warn('Invalid layout idealEdgeLengthType setting, will revert to "multiplier" setting'),d(f)?y.organicLayoutSettings.idealEdgeLength=f:f!==void 0&&G.getLogger(this).warn("Invalid layout idealEdgeLength setting, will revert to default setting")),(e==="CHRONOLOGICAL_MULTIPLE"||e==="CHRONOLOGICAL_SINGLE")&&t.chronologicalLayoutSettings){const u=t.chronologicalLayoutSettings;u.durationLineWidth&&u.durationLineWidth<0&&G.getLogger(this).warn("Invalid layout durationLineWidth setting, will revert to default setting")}return y}_convertLayoutSettingsToCalculationSettings(e){e.organicLayoutSettings??(e.organicLayoutSettings={});let t=e.organicLayoutSettings.idealEdgeLength;return e.organicLayoutSettings.idealEdgeLengthType===te.ABSOLUTE&&(t===void 0?t=-1:t*=-1),{computationBudgetTime:e.organicLayoutSettings.computationBudgetTime,repulsionRadiusMultiplier:e.organicLayoutSettings.repulsionRadiusMultiplier,idealEdgeLengthMultiplier:t}}_createSublayer(e){return new Y({objectType:e,parentCompositeLayer:this,graphType:e.type})}_handleSublayersChange(e,t){t&&(t.forEach(a=>{a.parent=null}),this.removeHandles("sublayers-owner")),e&&(e.forEach(a=>{a.parent=this}),this.addHandles([e.on("after-add",({item:a})=>{a.parent=this}),e.on("after-remove",({item:a})=>{a.parent=null})],"sublayers-owner"))}};E([D()],k.prototype,"dataPreloadedInLocalCache",void 0),E([D()],k.prototype,"defaultLinkChartConfig",void 0),E([D()],k.prototype,"dataManager",void 0),E([D()],k.prototype,"knowledgeGraph",void 0),E([D({type:ee.ofType(Y),json:{write:{ignoreOrigin:!0}}})],k.prototype,"layers",void 0),E([D()],k.prototype,"entityLinkChartDiagramLookup",void 0),E([D()],k.prototype,"relationshipLinkChartDiagramLookup",void 0),E([D()],k.prototype,"linkChartExtent",void 0),E([D()],k.prototype,"memberEntityTypes",void 0),E([D()],k.prototype,"memberRelationshipTypes",void 0),E([D({type:["LinkChartLayer"]})],k.prototype,"operationalLayerType",void 0),E([D()],k.prototype,"sublayerIdsCache",void 0),E([D({type:ee.ofType(Y),json:{write:{ignoreOrigin:!0}}})],k.prototype,"tables",void 0),E([D({json:{read:!1}})],k.prototype,"type",void 0),E([D({json:{read:!1}})],k.prototype,"chronologicalAuxiliaryGraphics",void 0),k=E([Oe("esri.layers.LinkChartLayer")],k);const Ga=k;export{Ga as default};
