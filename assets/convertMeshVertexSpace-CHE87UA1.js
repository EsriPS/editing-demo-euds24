import{aF as m,aO as s,ba as p}from"./index-C1aGfQcb.js";import{p as a}from"./MeshVertexAttributes-QRxk1PRg.js";import{B as n}from"./vertexSpaceConversion-BLEc1NbH.js";import"./meshProperties-C4iW0Ukm.js";import"./mat3-Dg2BrR6m.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-Dk4dwAN8.js";import"./vec32-CmwgPQMd.js";import"./spatialReferenceEllipsoidUtils-BEJMNM9o.js";import"./computeTranslationToOriginAndRotation-C2_ZYUki.js";import"./projectBuffer-CZ7yaGuo.js";import"./projectPointToVector-ByIVLKML.js";import"./projection-BOBOhWzm.js";import"./meshVertexSpaceUtils-D5F-abOR.js";import"./MeshLocalVertexSpace-sgg6_SW2.js";import"./vec3-C734WYsa.js";import"./BufferView-sBvw8vqP.js";import"./vec2-D9okOEat.js";import"./vec42-BHDxGccW.js";import"./vec4-qgGorNMJ.js";async function O(t,o,r){await Promise.resolve(),m(r);const e=n(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new s("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new a({...e,uv:p(t.vertexAttributes.uv),color:p(t.vertexAttributes.color)}),o);return i.transform=null,i}export{O as convertMeshVertexSpace};
