import{L as m,dC as g,aF as u,aO as v,b3 as _,eD as w,F as l,G as n,K as T,cf as R,eE as k,cS as F}from"./index-C1aGfQcb.js";import{N as x,K as b}from"./projection-BOBOhWzm.js";import{i as S,e as E,h as P}from"./progressUtils-wtUH52Ad.js";import{o as j}from"./infoFor3D-C0hFfS1m.js";import"./projectBuffer-CZ7yaGuo.js";let i=class extends m{constructor(){super({}),this.files=[],this.progress=0,this._uploadTask=null,this._layer=null}destroy(){this.cancel(),this.files=[],this._layer=null,this._uploadTask=null}get state(){const e=this._uploadTask;return e&&this.files.length!==0?e.finished?e.error?"error":"success":"pending":"default"}get result(){var e;return((e=this._uploadTask)==null?void 0:e.value)??null}get error(){var e;return((e=this._uploadTask)==null?void 0:e.error)??null}uploadTo(e){this.cancel(),this.files=[],this._layer=e,this._uploadTask=g(async r=>{var f;const o=await z(e);u(r),this.progress=0,this.files=o;const t=S(E.upload,d=>{this.progress=d},"Upload.uploadTo");if(o.length===0)return null;u(r);const a=await e.extractAndFilterFiles(o);u(r),a.length>0&&(this.files=a);const s=await e.convertMesh(a,{signal:r,onProgress:t.makeOnProgress("createFromFiles")});if(u(r),!s)throw new v("editor:upload","could not upload or convert model");const p=a.reduce((d,y)=>d+y.size,0),h=t.simulate("loadMesh",P(p));try{await s.load()}finally{h.remove()}if(_("enable-feature:georeferenced-uploads")&&s.metadata.georeferenced){if(await w(e.spatialReference,(f=s.origin)==null?void 0:f.spatialReference))return{type:"georeferenced",mesh:s};if((e.spatialReference.isWebMercator||e.spatialReference.isWGS84)&&await D(s,e.spatialReference))return{type:"georeferenced-reprojected",mesh:s}}return s.spatialReference=e.spatialReference,s.vertexSpace.origin=[0,0,0],{type:"non-georeferenced",mesh:s}})}retry(){this._layer&&this.uploadTo(this._layer)}cancel(){var e;(e=this._uploadTask)==null||e.abort()}};l([n()],i.prototype,"files",void 0),l([n()],i.prototype,"progress",void 0),l([n()],i.prototype,"state",null),l([n()],i.prototype,"result",null),l([n()],i.prototype,"error",null),l([n()],i.prototype,"_uploadTask",void 0),l([n()],i.prototype,"_layer",void 0),i=l([T("esri.widgets.Editor.Upload")],i);let c=null;async function z(e){const{resolve:r,promise:o}=R(),t=document.createElement("input");t.type="file",t.multiple=!1,t.accept=[...j(e.infoFor3D),".zip"].join(","),t.style.display="none",document.body.appendChild(t);const a=k(t,"change",()=>r(t.files?Array.from(t.files):[]));return c?c(t):t.click(),o.finally(()=>{a.remove(),t.remove()})}function K(e,r){c=o=>{r==null||r(),Promise.resolve().then(()=>e).then(t=>{if(!c)return;const a=new DataTransfer;t.forEach(s=>a.items.add(s)),o.files=a.files,o.dispatchEvent(new Event("change"))})}}function L(){c=null}async function D(e,r){if(await x(e.spatialReference,r),!e.vertexSpace.origin)return!1;const[o,t,a]=e.vertexSpace.origin,s=new F({x:o,y:t,z:a,spatialReference:e.spatialReference}),p=b(s,r);return!!p&&(e.vertexSpace.origin=[p.x,p.y,p.z??0],e.spatialReference=r,!0)}export{i as Upload,L as clearPromptForFilesStub,K as stubFilePickerToSelect};
