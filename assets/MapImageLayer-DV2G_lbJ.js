import{aH as $,eP as v,cA as f,f5 as O,aR as g,cu as T,f6 as P,aO as x,aG as E,F as o,G as a,f7 as S,W as F,Z as L,K as M,f8 as R}from"./index-C1aGfQcb.js";import{S as _}from"./MultiOriginJSONSupport-Qqzd52Lf.js";import{i as j}from"./scaleUtils-D2VbidBA.js";import{f as J}from"./Layer-CneDw8eF.js";import{i as N}from"./APIKeyMixin-BrvyKlIW.js";import{m as U,f as q,t as A}from"./SublayersOwner-BbARfUxi.js";import{l as V}from"./ArcGISService-C1oUW8BT.js";import{l as k}from"./BlendLayer-CG9LFMxd.js";import{e as G}from"./CustomParametersMixin-BhjpsNjD.js";import{b as Z}from"./OperationalLayer-nNeN4Mrb.js";import{j as z}from"./PortalLayer-Bqf_dhsv.js";import{f as H}from"./RefreshableLayer-CwxQNwd3.js";import{t as K}from"./ScaleRangeLayer-66YiyNPI.js";import{l as W}from"./TemporalLayer-CR5q7V2k.js";import{p as B}from"./commonProperties-Drl05DKJ.js";import{y as C}from"./ExportImageParameters-BqqZG4Ti.js";import{t as D}from"./imageBitmapUtils-BhEpTGy7.js";import{e as I}from"./sublayerUtils-C2scBnIk.js";import{t as Q}from"./versionUtils-DBm9Te4x.js";import{p as X}from"./TimeExtent-DGiXUfis.js";import"./Version-DD-eRUXC.js";import"./arcgisLayerUrl-BkZy4Mr3.js";import"./portalItemUtils-Cy9KvMYK.js";import"./projection-BOBOhWzm.js";import"./projectBuffer-CZ7yaGuo.js";import"./CollectionFlattener-COw367kg.js";import"./UniqueValueRenderer-CAZbf8NT.js";import"./RendererLegendOptions-CULirduz.js";import"./diffUtils-DMLidw0V.js";import"./colorRamps-D4VCsfmX.js";import"./sizeVariableUtils-Cmcuvw-4.js";import"./visualVariableUtils-dx28E4EQ.js";import"./lengthUtils-CFwdZ3dz.js";import"./jsonUtils-BWWcP_yB.js";import"./defaults-Dbnhuv3C.js";import"./defaultsJSON-GKolV7NZ.js";import"./styleUtils-CEgUrR2a.js";import"./jsonUtils-CWFaUb2E.js";import"./LRUCache-DbPTy7LA.js";import"./FieldsIndex-BrdRr9E_.js";import"./UnknownTimeZone-DhxWDwo9.js";import"./OverrideHelper-D-UVQ00R.js";import"./colorUtils-BWiljOUv.js";import"./vec42-BHDxGccW.js";import"./vec4f64-o2zAXfmz.js";import"./utils-D7agaEG-.js";import"./enums-CmIX1y88.js";import"./quantizationUtils-DbJV_fl5.js";import"./heatmapUtils-D0BPLm9w.js";import"./QueryTask-CRk94ntj.js";import"./infoFor3D-C0hFfS1m.js";import"./utils-DGPHbhMN.js";import"./executeForIds-B2TI_zu9.js";import"./query-c3x-72Af.js";import"./normalizeUtils-Bg1OALXh.js";import"./normalizeUtilsCommon-UUlRRPVA.js";import"./utils-ByvCMLXh.js";import"./pbfQueryUtils-zIR8yi_m.js";import"./pbf-B3ECgi3E.js";import"./OptimizedGeometry-C9mSZhHi.js";import"./OptimizedFeature-swgcyHeh.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./queryZScale-D-ZT69l7.js";import"./Query-LPs1Zyw4.js";import"./FullTextSearch-Cza0yp3f.js";import"./executeQueryJSON-Dy35kTJJ.js";import"./FeatureSet-CeKoTEEO.js";import"./featureConversionUtils-C-Uqf9Q4.js";import"./featureLayerUtils-Dy99w2fj.js";import"./FeatureType-JHO2oVJp.js";import"./FeatureTemplate-DJBXu3Te.js";import"./labelingInfo-BV0df7F6.js";import"./labelUtils-C_ZaLudT.js";import"./LayerFloorInfo-DzoJncEV.js";import"./Relationship-CBhq9gYu.js";import"./serviceCapabilitiesUtils-B23--4px.js";import"./popupUtils-BA1X4qoc.js";import"./jsonUtils-n3e_wlfQ.js";import"./parser-C4Qiz3JH.js";import"./utils-sqJe3zMg.js";import"./TimeInfo-CY1-cj-U.js";import"./timeUtils-X0MXjtQ8.js";import"./ElevationInfo-D7CBP7sd.js";import"./floorFilterUtils-DZ5C6FQv.js";let i=class extends k(W(K(U(q(V(Z(z(_(H(N(G(J)))))))))))){constructor(...t){super(...t),this._exportImageParameters=new C({layer:this}),this.dateFieldsTimeZone=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeZone=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(t,r){return typeof t=="string"?{url:t,...r}:t}load(t){const r=t!=null?t.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},t).catch($).then(()=>this._fetchService(r))),Promise.resolve(this)}destroy(){this._exportImageParameters.destroy()}readImageFormat(t,r){const n=r.supportedImageFormatTypes;return n&&n.includes("PNG32")?"png32":"png24"}writeSublayers(t,r,n,e){var l,d,b;if(!this.loaded||!t)return;const s=t.slice().reverse().flatten(({sublayers:m})=>m&&m.toArray().reverse()).toArray();let p=!1;const h=v(e.origin);if((l=this.capabilities)!=null&&l.operations.supportsExportMap&&((b=(d=this.capabilities)==null?void 0:d.exportMap)!=null&&b.supportsDynamicLayers)){if(h===f.PORTAL_ITEM){const m=this.createSublayersForOrigin("service").sublayers;p=I(s,m,f.SERVICE)}else if(h>f.PORTAL_ITEM){const m=this.createSublayersForOrigin("portal-item");p=I(s,m.sublayers,v(m.origin))}}const c=[],u={writeSublayerStructure:p,...e};let y=p||this.hasVisibleLayersForOrigin(h);s.forEach(m=>{const w=m.write({},u);c.push(w),y=y||m.originOf("visible")==="user"}),c.some(m=>Object.keys(m).length>1)&&(r.layers=c),y&&(r.visibleLayers=s.filter(m=>m.visible).map(m=>m.id))}createExportImageParameters(t,r,n,e){const s=(e==null?void 0:e.pixelRatio)||1;t&&this.version>=10&&(t=t.clone().shiftCentralMeridian()),this._exportImageParameters.floors=(e==null?void 0:e.floors)??null,this._exportImageParameters.scale=j({extent:t,width:r})*s;const p=this._exportImageParameters.toJSON(),h=!(e!=null&&e.rotation)||this.version<10.3?{}:{rotation:-e.rotation},c=t==null?void 0:t.spatialReference,u=O(c);p.dpi*=s;const y={};if(e!=null&&e.timeExtent){const{start:l,end:d}=e.timeExtent.toJSON();y.time=l&&d&&l===d?""+l:`${l??"null"},${d??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(y.time="null,null");return{bbox:t&&t.xmin+","+t.ymin+","+t.xmax+","+t.ymax,bboxSR:u,imageSR:u,size:r+","+n,...p,...h,...y}}async fetchImage(t,r,n,e){const{data:s}=await this._fetchImage("image",t,r,n,e);return s}async fetchImageBitmap(t,r,n,e){const{data:s,url:p}=await this._fetchImage("blob",t,r,n,e);return D(s,p,e==null?void 0:e.signal)}async fetchRecomputedExtents(t={}){const r={...t,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:n}=await g(this.url,r),{extent:e,fullExtent:s,timeExtent:p}=n,h=e||s;return{fullExtent:h&&T.fromJSON(h),timeExtent:p&&X.fromJSON({start:p[0],end:p[1]})}}loadAll(){return P(this,t=>{t(this.allSublayers),t(this.subtables)})}serviceSupportsSpatialReference(t){return Q(this,t)}async _fetchImage(t,r,n,e,s){var c,u,y;const p={responseType:t,signal:(s==null?void 0:s.signal)??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(r,n,e,s),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},h=this.parsedUrl.path+"/export";if(((c=p.query)==null?void 0:c.dynamicLayers)!=null&&!((y=(u=this.capabilities)==null?void 0:u.exportMap)!=null&&y.supportsDynamicLayers))throw new x("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:p.query});try{const{data:l}=await g(h,p);return{data:l,url:h}}catch(l){throw E(l)?l:new x("mapimagelayer:image-fetch-error",`Unable to load image: ${h}`,{error:l})}}async _fetchService(t){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:r,ssl:n}=await g(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:t});n&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=r,this.read(r,{origin:"service",url:this.parsedUrl})}hasVisibleLayersForOrigin(t){var r;return!(t==null||!((r=this.sublayersSourceJSON[t])!=null&&r.visibleLayers))}};o([a(S("dateFieldsTimeReference"))],i.prototype,"dateFieldsTimeZone",void 0),o([a({type:Boolean})],i.prototype,"datesInUnknownTimezone",void 0),o([a()],i.prototype,"dpi",void 0),o([a()],i.prototype,"gdbVersion",void 0),o([a()],i.prototype,"imageFormat",void 0),o([F("imageFormat",["supportedImageFormatTypes"])],i.prototype,"readImageFormat",null),o([a({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],i.prototype,"imageMaxHeight",void 0),o([a({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],i.prototype,"imageMaxWidth",void 0),o([a()],i.prototype,"imageTransparency",void 0),o([a({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],i.prototype,"isReference",void 0),o([a({json:{read:!1,write:!1}})],i.prototype,"labelsVisible",void 0),o([a({type:["ArcGISMapServiceLayer"]})],i.prototype,"operationalLayerType",void 0),o([a({json:{read:!1,write:!1}})],i.prototype,"popupEnabled",void 0),o([a(S("preferredTimeReference"))],i.prototype,"preferredTimeZone",void 0),o([a()],i.prototype,"sourceJSON",void 0),o([a({json:{write:{ignoreOrigin:!0}}})],i.prototype,"sublayers",void 0),o([L("sublayers",{layers:{type:[A]},visibleLayers:{type:[R]}})],i.prototype,"writeSublayers",null),o([a({type:["show","hide","hide-children"]})],i.prototype,"listMode",void 0),o([a({json:{read:!1},readOnly:!0,value:"map-image"})],i.prototype,"type",void 0),o([a(B)],i.prototype,"url",void 0),i=o([M("esri.layers.MapImageLayer")],i);const Fe=i;export{Fe as default};
